package fr.igpolytech.aliachawaf.Battleship;

import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class ArtificialPlayer0 extends Player implements ArtificialIntelligence {

	protected int playerNumber;
	protected int mapSize;

	public ArtificialPlayer0(int playerNumber, int mapSize) {
		super(mapSize);
		this.playerNumber = playerNumber;
		this.mapSize = mapSize;
	}

	// getters & setters
	public int getPlayerNumber() {
		return playerNumber;
	}

	public void setPlayerNumber(int playerNumber) {
		this.playerNumber = playerNumber;
	}

	public int getMapSize() {
		return mapSize;
	}

	public void setMapSize(int mapSize) {
		this.mapSize = mapSize;
	}

	// methods

	public Coord choseOneCoord() {
		// chose randomly a column and a line
		String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String columnsBoard = alphabet.substring(0, this.mapSize);
		Random random = new Random();
		char randomColumn = columnsBoard.charAt(random.nextInt(columnsBoard
				.length()));

		int randomLine = ThreadLocalRandom.current().nextInt(1,
				this.mapSize + 1);

		return new Coord(randomColumn, randomLine, this.mapSize);
	}

	public void placeOneShip(Ship s) {

		// chose randomly start and end coord for the ship

		int directionRandom;
		boolean checkEndCoord, checkCoordIsFree;
		char column;
		Coord startCoord;

		/* random start coord for the ship */

		do {
			startCoord = this.choseOneCoord();
			System.out.println("start : " + startCoord);

			/*for (int i = 0; i < this.getPlayerShips().size(); i++) {
				for (int j = 0; j < this.getPlayerShips().get(i)
						.shipListCoord().size(); i++) {

					if (startCoord.CompareCoord(this.getPlayerShips().get(i)
							.shipListCoord().get(j))) {
						checkCoordIsFree = false;
					}

				}
			}*/
			s.setStartCoord(startCoord);
			s.setEndCoord(startCoord);
			
			checkCoordIsFree = s.checkPlaceIsFree(this.getPlayerShips());
			System.out.println("check : " +checkCoordIsFree);
			
		} while (!(checkCoordIsFree));

		

		Coord endCoord = new Coord(this.mapSize);

		Coord start = new Coord(this.mapSize);
		start.setColumn(startCoord.getColumn());
		start.setLine(startCoord.getLine());

		do {

			do {

				/*
				 * random direction is chosen 1 : left to right 2 : right to
				 * left 3 : top to bottom 4 : bottom to top
				 */

				directionRandom = ThreadLocalRandom.current().nextInt(1, 5);

				if (directionRandom == 1) {
					/* increment column by ship's size */
					column = start.getColumn();
					for (int o = 1; o < s.getSize(); o++) {
						column++;
					}
					endCoord.setColumn(column);
					endCoord.setLine(start.getLine());

				} else if (directionRandom == 2) {
					/* decrement column by ship's size */
					column = start.getColumn();
					for (int l = 1; l < s.getSize(); l++) {
						column--;
					}
					endCoord.setColumn(column);
					endCoord.setLine(start.getLine());

				} else if (directionRandom == 3) {
					endCoord.setColumn(start.getColumn());
					endCoord.setLine(start.getLine() + s.getSize() - 1);

				} else if (directionRandom == 4) {
					endCoord.setColumn(start.getColumn());
					endCoord.setLine(start.getLine() - s.getSize() + 1);
				}

				checkEndCoord = endCoord.checkCoord();

			} while (!(checkEndCoord));

			startCoord.putCoordInOrder(endCoord);

			s.setEndCoord(endCoord);

			startCoord = start;

			System.out.println(s.toString() + s.shipListCoord());

		} while (!(s.checkPlaceIsFree(this.getPlayerShips())));

		this.getPlayerShips().add(s);
		this.getBoardGame().updateBoard(s);
		System.out.println(this.getBoardGame());

	}

	public void placeAllShips(List<Ship> list) {

		// Iterator<Ship> it = list.iterator();
		for (int i = 0; i < list.size(); i++) {
			placeOneShip(list.get(i));
			// System.out.println(this.getPlayerShips());
		}

	}

	public Coord sendMissile() {
		// TODO Auto-generated method stub
		return null;
	}

	/*
	 * placer ses bateaux (random) tirer avec une strategie
	 */

}
