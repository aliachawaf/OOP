package fr.igpolytech.aliachawaf.Battleship;

import java.util.List;

public class AI0vsAI2 {

	public static String playBattleship(List<Ship> player0_ships, List<Ship> player1_ships,
			int currentPlayer) {

		int mapSize = 10;
		boolean firstHit = false;
		boolean secondHit = false;
		boolean thirdHit = false;
		boolean shipAttackedIsVertical = false;
		boolean destroyed = false;
		Coord missileCoord = new Coord(mapSize);
		Coord missileCoordHit = new Coord(mapSize);

		/* set up 2 players */
		ArtificialPlayer0 player0 = new ArtificialPlayer0(mapSize);
		ArtificialPlayer2 player2 = new ArtificialPlayer2(mapSize);

		/* set up a game */
		Game game = new Game(player0, player2);

		if (currentPlayer == 0) {
			game.setCurrentPlayer(player0);
		} else {
			game.setCurrentPlayer(player2);
		}

		/* initialization of boards' display */
		player0.getBoardGame().initBoard();
		player0.getBoardAttack().initBoard();
		player2.getBoardGame().initBoard();
		player2.getBoardAttack().initBoard();

		/* Place all their ships on grid */

		player0.placeAllShips(player0_ships);
		player2.placeAllShips(player1_ships);

		System.out.println(player0.boardGame);
		System.out.println(player2.boardGame);
		
		// ********* ATTACK *********//
		
		while (game.NotEnded()) {
			if (game.getCurrentPlayer() == player0) {
				missileCoord = player0.sendMissile();

				if (player2.isAnyoneHit(missileCoord)) {
					/* update and display boards */
					player0.getBoardAttack().updateBoardAttack(missileCoord, 1);
					player2.getBoardGame().updateBoardAttack(missileCoord, 1);

				} else {
					/* update and display board attack */
					player0.getBoardAttack().updateBoardAttack(missileCoord, 0);
					player2.getBoardGame().updateBoardAttack(missileCoord, 0);

				}
				
				//System.out.println("AI0 " + player0.boardAttack);

			} else {
				if (firstHit && !destroyed) {

					if (secondHit) {
						missileCoord = player2.sendMissileAccordingToDirection(
								shipAttackedIsVertical, missileCoordHit,
								thirdHit);
					} else {
						missileCoord = player2
								.sendMissileAroundShipHit(missileCoordHit);
					}
				} else {
					missileCoord = player2.sendMissile();
					destroyed = false;
				}

				int n = player0.listShipDestroyed().size();

				if (player0.isAnyoneHit(missileCoord)) {
					/* update and display boards */
					player2.getBoardAttack().updateBoardAttack(missileCoord, 1);
					player0.getBoardGame().updateBoardAttack(missileCoord, 1);
					System.out.println("You've been hit on " + missileCoord
							+ ". Your new board game : "
							+ player0.getBoardGame());

					if (secondHit) {
						thirdHit = true;
					}
					if (firstHit) {
						shipAttackedIsVertical = player2
								.shipToAttackIsVertical(missileCoordHit,
										missileCoord);
						System.out.println("ship to attack is vertical : "
								+ shipAttackedIsVertical);
						secondHit = true;
					}

					firstHit = true;

					missileCoordHit = missileCoord;

					if (player0.listShipDestroyed().size() > n) {
						destroyed = true;
						firstHit = false;
						secondHit = false;
						thirdHit = false;
					}

				} else {
					/* update and display board attack */
					player2.getBoardAttack().updateBoardAttack(missileCoord, 0);
					player0.getBoardGame().updateBoardAttack(missileCoord, 0);

				}
				
				//System.out.println("AI2 " + player2.boardAttack);
			}
			game.changePlayer();
		}

		String winner = game.winnerEndGame().toString();
		
		System.out.println(winner);

		/* clear hit coord for all ships for next game */
		player0.clearCoordHitAllShips();
		player2.clearCoordHitAllShips();
		
		return winner;

	}
}
